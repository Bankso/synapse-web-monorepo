import {
  ADDITIONAL_PROPERTY_FLAG,
  FormContextType,
  RJSFSchema,
  StrictRJSFSchema,
  TranslatableString,
  WrapIfAdditionalTemplateProps,
} from '@rjsf/utils'
import { FocusEventHandler, useEffect, useState } from 'react'
import { Grid, TextField } from '@mui/material'

export default function SynapseAnnotationsWrapIfAdditionalTemplate<
  T = any,
  S extends StrictRJSFSchema = RJSFSchema,
  F extends FormContextType = any,
>(props: WrapIfAdditionalTemplateProps<T, S, F>) {
  const {
    id,
    classNames,
    disabled,
    label,
    onKeyChange,
    readonly,
    required,
    schema,
    children,
    registry,
  } = props

  const { formContext } = registry
  const translateString = formContext?.translateString
  const keyLabel = translateString?.(TranslatableString.KeyLabel, ['']) ?? 'Key'

  const additional = ADDITIONAL_PROPERTY_FLAG in schema
  const isAutoGenerated = /^newKey(_?\d+)?$/.test(label)

  const [initializedId, setInitializedId] = useState<string | null>(null)
  const [keyValue, setKeyValue] = useState('')

  useEffect(() => {
    if (additional && initializedId !== id) {
      setInitializedId(id)
      console.log('label', label, 'isAutoGenerated', isAutoGenerated)
      if (isAutoGenerated) {
        setKeyValue('') // show placeholder instead
      } else {
        setKeyValue(label) // show actual label for non-new rows
      }
    }
  }, [id, label, additional, initializedId, isAutoGenerated])

  const handleBlur: FocusEventHandler<
    HTMLInputElement | HTMLTextAreaElement
  > = e => {
    const newValue = e.target.value
    if (!readonly && newValue && newValue !== label) {
      setKeyValue(newValue)
      onKeyChange(newValue)
    }
  }

  if (!additional) {
    return <div className={classNames}>{children}</div>
  }

  return (
    <div className={classNames}>
      <Grid container my={1} columnSpacing={2} rowSpacing={0}>
        <Grid item xs={3}>
          <TextField
            fullWidth
            required={required}
            label={keyLabel}
            value={keyValue}
            placeholder={label}
            disabled={disabled || readonly}
            id={`${id}-key`}
            name={`${id}-key`}
            onChange={e => setKeyValue(e.target.value)}
            onBlur={handleBlur}
            type="text"
          />
        </Grid>
        {children}
      </Grid>
    </div>
  )
}

// vite.config.umd.ts
import { resolve } from "path";
import { ConfigBuilder } from "file:///Users/kmccullough/Documents/synapse-web-monorepo/packages/vite-config/dist/index.js";

// package.json
var version = "3.3.30";

// vite.config.umd.ts
var __vite_injected_original_dirname = "/Users/kmccullough/Documents/synapse-web-monorepo/packages/synapse-react-client";
var globalExternals = {
  katex: "katex",
  react: "React",
  "react-dom": "ReactDOM",
  "react-bootstrap": "ReactBootstrap",
  "plotly.js-basic-dist": "Plotly",
  "react-plotly.js": "createPlotlyComponent",
  "rss-parser": "Parser",
  "react-mailchimp-subscribe": "ReactMailchimpSubscribe",
  "react-measure": "ReactMeasure",
  markdownit: "markdownit",
  markdownitSynapse: "markdownitSynapse",
  markdownitSub: "markdownitSub",
  markdownitSup: "markdownitSup",
  markdownitCentertext: "markdownitCentertext",
  markdownitSynapseHeading: "markdownitSynapseHeading",
  markdownitSynapseTable: "markdownitSynapseTable",
  markdownitStrikethroughAlt: "markdownitStrikethroughAlt",
  markdownitContainer: "markdownitContainer",
  markdownitInlineComments: "markdownitInlineComments",
  markdownitBr: "markdownitBr",
  markdownitMath: "markdownitMath",
  "universal-cookie": "UniversalCookie"
};
var config = new ConfigBuilder().setIncludeReactConfig(true).setConfigOverrides({
  root: ".",
  build: {
    sourcemap: true,
    emptyOutDir: false,
    outDir: "./dist/umd",
    minify: true,
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src/umd.index.ts"),
      name: "SRC",
      fileName: () => "synapse-react-client.production.min.js",
      formats: ["umd"]
    },
    rollupOptions: {
      external: Object.keys(globalExternals),
      output: {
        globals: globalExternals,
        banner: `/*! SRC v${version} */`,
        assetFileNames: (assetInfo) => {
          if (assetInfo.name === "style.css")
            return "synapse-react-client.production.min.css";
          return assetInfo.name;
        }
      }
    }
  }
}).build();
var vite_config_umd_default = config;
export {
  vite_config_umd_default as default
};
//# sourceMappingURL=data:application/json;base64,

import{j as p}from"./iframe-YNORiRmR.js";import{R as a}from"./RowDataTableWithQuery-Cg668qPs.js";import"./index-r8ZA1smB.js";import"./SqlFunctions-CJteREjA.js";import"./SkeletonButton-CDu-p3fM.js";import"./SkeletonInlineBlock-DuGmV4aM.js";import"./SkeletonTable-BD0sK0Ta.js";import"./SkeletonParagraph-EPv1fXrq.js";import"./RowDataTable-eB3FBX6s.js";import"./StyledTableContainer-C6LSLMPN.js";import"./SynapseCardLabel-_agkqnCM.js";import"./CardUtils-BVZieRcp.js";import"./EntityLink-CSWP5Xgw.js";import"./useEntity-CSu2QEQP.js";import"./pickBy-rr4lLDZz.js";import"./isString-CBX5AqAy.js";import"./_baseIteratee-BgQd_HJ1.js";import"./useQueries-BhKGWhSp.js";import"./queryOptions-C9woPjwX.js";import"./useInfiniteQuery-DDQOECX-.js";import"./InfiniteQueryUtils-CKlRW-xB.js";import"./useEntityBundle-DoscKK1e.js";import"./useGetEntityHeaders-CHUs91za.js";import"./EntityIcon-BE1L0-SL.js";import"./ErrorChip-B4rksfPO.js";import"./Chip-DuirGYLs.js";import"./MarkdownSynapse-gLVhWgk-.js";import"./UserBadge-BHMAE20r.js";import"./MenuItem-DOC5mnQP.js";import"./Card-BuC37YY8.js";import"./ImageFileHandle-VaSK-Iop.js";import"./index-jrGVMwH5.js";import"./Box-DND7TB-L.js";import"./GenericCard-p82gE28_.js";import"./HeaderCard-CRJ3M1ml.js";import"./index-Dvo02Ni7.js";import"./Icon-CfTE3DT0.js";import"./mouse-DopmM-sF.js";import"./SortDown-osA8NrRK.js";import"./ShowMore-mDRS_lbW.js";import"./HeaderCardV2-CN5A6J8F.js";import"./index-DA-sFlI6.js";import"./SustainabilityScorecard-CK_y04gP.js";import"./Close-Bti9lGnZ.js";import"./Dial-BYf_y5s_.js";import"./CheckIcon-TF73XRhk.js";import"./NoContentAvailable-CKxNsXMK.js";import"./FileHandleLink-D5QepRjE.js";const e={name:"Name",grantDOI:"DOI",dataType:"Data Type(s)"},n={sql:"SELECT * FROM syn52694652"},mr={title:"UI/RowDataTable/RowDataTableWithQuery",component:a,parameters:{chromatic:{viewports:[600,1200]}}},r={render:i=>p.jsx(a,{...i}),args:{query:n,columnAliases:e,displayedColumns:["studyId","name","grantDOI"],columnLinks:[{isMarkdown:!1,matchColumnName:"Grant DOI",linkColumnName:"Grant DOI"}]}};var o,t,m;r.parameters={...r.parameters,docs:{...(o=r.parameters)==null?void 0:o.docs,source:{originalSource:`{
  render: args => <RowDataTableWithQuery {...args} />,
  args: {
    query: mockQuery,
    columnAliases: dataColumnAliases,
    displayedColumns: ['studyId', 'name', 'grantDOI'],
    columnLinks: [{
      isMarkdown: false,
      matchColumnName: 'Grant DOI',
      linkColumnName: 'Grant DOI'
    }]
  }
}`,...(m=(t=r.parameters)==null?void 0:t.docs)==null?void 0:m.source}}};const ar=["Demo"];export{r as Demo,ar as __namedExportsOrder,mr as default};
